/*
给定一张 n 个点的带权无向图，点从 0~n-1 标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。

输入格式
第一行输入整数n。

接下来n行每行n个整数，其中第i行第j个整数表示点i到j的距离（记为a[i,j]）。

对于任意的x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且 a[x,y]+a[y,z]>=a[x,z]。

输出格式
输出一个整数，表示最短Hamilton路径的长度。

数据范围
1≤n≤20
0≤a[i,j]≤107
输入样例：
5
0 2 4 5 1
2 0 6 5 3
4 6 0 8 3
5 5 8 0 5
1 3 3 5 0
输出样例：
18

*/


//f[i,j]:所有从0走到j，走过的的所有点是i的所有路径。  i是二进制(1101001)

/*
#include<cstring>
#include<iostream>
#include<algorithm>

using namespace std;

const int N = 20, M = 1 << N;

int n;
int w[N][N];
int f[M][N]; //所有从0走到j，走过的点的集合是i的所有路径 。属性是总的距离min

int main() {
	

	cin >> n;

	//代表w[i][j]代表从点i到点j的距离
	for (int i = 0; i < n; i++) 
		for (int j = 0; j < n; j++) 
			cin >> w[i][j];  //权值

	memset(f, 0x3f, sizeof f);  //将其他都赋值为最大值
	f[1][0] = 0;  //从0走到0,走过的集合就是0000001 走过的点就是0，第0位是1，其余都是0  ，从0走到0,距离为0

	//i和j是枚举的所有状态
	for (int i = 0; i < 1 << n; i++) {  //2的n次方 * n *n
		for (int j = 0; j < n; j++) {
			if (i >> j & 1) {		//我从0走到j，必须要包含j，这样的状态才有意义
				for (int k = 0; k < n; k++) {  //再枚举下转移的状态，枚举下从哪个点转移到j这个点的
					if ((i - (1 << j)) >> k & 1)  //当i去掉j这个点后，既然是从k转移到j的，那一定要有k这个点， 判断k这位是否为1
						f[i][j] = min(f[i][j], f[i - (1 << j)][k] + w[k][j]); //走到点k的路径为i中，必须包含k点
				}
			}
		}
	}
	cout << f[(1 << n) - 1][n - 1] << endl;  //1<<n -1 其实是111111111就是这种n个1 ，刚好落在n-1这个点上的最短距离

	return 0;
}*/